
syntax = "proto2";

package apollo.localization;

import "third_party/apollo/proto/common/header.proto";
import "third_party/apollo/proto/localization/pose.proto";
import "third_party/apollo/proto/geometry/geometry.proto";
import "third_party/apollo/proto/geometry/pnc_point.proto";
import "third_party/apollo/proto/localization/localization_status.proto";

message Uncertainty {
  // Standard deviation of position, east/north/up in meters.
  optional apollo.geometry.Point3D position_std_dev = 1;

  // Standard deviation of quaternion qx/qy/qz, unitless.
  optional apollo.geometry.Point3D orientation_std_dev = 2;

  // Standard deviation of linear velocity, east/north/up in meters per second.
  optional apollo.geometry.Point3D linear_velocity_std_dev = 3;

  // Standard deviation of linear acceleration, right/forward/up in meters per
  // square second.
  optional apollo.geometry.Point3D linear_acceleration_std_dev = 4;

  // Standard deviation of angular velocity, right/forward/up in radians per
  // second.
  optional apollo.geometry.Point3D angular_velocity_std_dev = 5;

  // TODO: Define covariance items when needed.
}

message LocalizationEstimate {
  optional apollo.common.Header header = 1;
  optional apollo.localization.Pose pose = 2;
  optional Uncertainty uncertainty = 3;

  // The time of pose measurement, seconds since 1970-1-1 (UNIX time).
  optional double measurement_time = 4;  // In seconds.

  // Future trajectory actually driven by the drivers
  repeated apollo.geometry.TrajectoryPoint trajectory_point = 5;

  // msf status
  optional MsfStatus msf_status = 6;
  // msf quality
  optional MsfSensorMsgStatus sensor_status = 7;
  // The cost time  
  optional double cost_time = 8;  // In millseconds.
  // state_message
  optional string state_message = 9;

}

enum MeasureState {
  OK = 0;
  WARNNING = 1;
  ERROR = 2;
  CRITICAL_ERROR = 3;
  FATAL_ERROR = 4;
}

message LocalizationStatus {
  optional apollo.common.Header header = 1;
  optional MeasureState fusion_status = 2;
  optional MeasureState gnss_status = 3 [deprecated = true];
  optional MeasureState lidar_status = 4 [deprecated = true];
  // The time of pose measurement, seconds since 1970-1-1 (UNIX time).
  optional double measurement_time = 5;  // In seconds.
  optional string state_message = 6;
}
